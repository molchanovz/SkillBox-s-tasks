package Module6;

/*
1. Создайте класс BankAccount, который представляет собой расчётный счёт в банке. У класса необходимо написать методы:
     a. Снять со счёта сумму денег (без комиссии).
     b. Вносить на счёт сумму денег (без комиссии).
     c. Получить остаток на счёте.
2. Создайте два класса наследника, расширяющие работу с остатком на счёте:
•	Депозитный расчётный счёт, с которого нельзя снимать деньги в течение месяца после последнего внесения.
•	Карточный счёт, при снятии денег с которого будет взиматься комиссия 1%.
3. Напишите метод в классе BankAccount для отправки денег с одного счёта на другой. Метод должен вернуть соответстующее сообщение, если деньги успешно переведены.

*/

import java.util.Date;

public class Bank {
    public static void main(String[] args) {
        Card acc = new Card(0);
        Card acc2 = new Card(0);
        acc.get(100);

    }
}

class BankAccount {
    private double check;

    public double getCheck() {
        return check;
    }

    public void setCheck(double check) {
        this.check = check;
    }

    BankAccount(double check) {
        this.check = check;
    }

    public double balance() {
        return check;
    }

    public void add(double money) {
        System.out.println("Внесено " + money + " у.е");
        this.check += money;
    }


    public void get(double money) {
        if (money <= this.check) {
            System.out.println("Списано " + money + " у.е");
            this.check -= money;
        } else {
            System.out.println("Недостаточно средств");
        }

    }

    String send(BankAccount receiver, int money) {
        if (this.check >= money) {
            this.check -= money;
            receiver.check += money;
            return "Деньги переведены";
        } else return "Деньги не переведены." + "Остаток:" + this.check;
    }
}

class Deposit extends BankAccount {
    long OperationDate;

    Deposit(double check) {
        super(check);
    }

    @Override
    public void add(double money) {
        super.add(money);
        OperationDate = new Date().getTime();
    }

    @Override
    public void get(double money) {
        long month = 25920001000l;
        long diff = (new Date().getTime()) - OperationDate;
        //long diff = 25920001001l;//проверка - если diff больше миллисекунд в месяце, то сумма спишется
        if ((diff) > month) {
            super.get(money);
        } else System.out.println("С последнего зачисления месяц еще не прошел");

    }
}

class Card extends BankAccount {

    Card(double check) {
        super(check);
    }

    @Override
    public void get(double money) {
        double commission = money * 1.01;
        if (commission <= getCheck()) {
            System.out.println("Списано " + commission + " у.е с учетом комиссии 1%");
            setCheck(getCheck()-commission);
        } else {
            System.out.println("Недостаточно средств. Не хватает " + Math.ceil(commission - getCheck()) + "у.е.");
        }
    }
}
